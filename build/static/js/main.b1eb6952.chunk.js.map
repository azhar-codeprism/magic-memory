{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","id","card","handleFrontClick","flipped","className","src","alt","onClick","cardData","matched","App","useState","cards","setCards","moves","setMoves","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","onMatch","useCallback","resetValues","onUnmatch","setTimeout","handleChoice","cardVal","useEffect","prevCards","map","cardsArr","sort","Math","random","cd","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAiBeA,MAff,YAA8D,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,QAChD,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWD,EAAU,UAAY,GAAtC,UACE,qBAAKC,UAAU,QAAQC,IAAKJ,EAAKI,IAAKC,IAAI,eAC1C,qBACEF,UAAU,OACVC,IAAK,iBACLC,IAAI,YACJC,QAAS,kBAAML,EAAiBD,UAPXD,ICAzBQ,EAAW,CACf,CAAEH,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,kBAAmBI,SAAS,GACnC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,mBAAoBI,SAAS,IA+EvBC,MA5Ef,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAUC,uBAAY,WAC1BC,IACAP,EAASD,EAAQ,KAChB,CAACA,IAEES,EAAYF,uBAAY,WAC5BC,IACAP,EAASD,EAAQ,KAChB,CAACA,IAiCJ,SAASQ,IACPE,YAAW,WACTP,EAAa,MACbE,EAAa,QACZ,KAEL,SAASM,EAAaC,GACpBV,EAAYG,EAAaO,GAAWT,EAAaS,GAGnD,OAxCAC,qBAAU,WAEY,OAAdX,GAAoC,OAAdE,IACpBF,EAAUX,MAAQa,EAAUb,KAC9Be,IACAP,GAAS,SAACe,GACR,OAAOA,EAAUC,KAAI,SAAC5B,GACpB,OAAIA,EAAKI,MAAQW,EAAUX,IAClB,2BAAKJ,GAAZ,IAAkBQ,SAAS,IAEpBR,SAKbsB,OAKL,CAACP,EAAWE,EAAWE,EAASG,IAqBjC,sBAAKnB,UAAU,MAAf,UACE,6CACA,wBAAQG,QArBZ,WACE,IAAMuB,EAAW,UAAItB,EAAaA,GAC/BuB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BJ,KAAI,SAACK,GAAD,mBAAC,eAAaA,GAAd,IAAkBlC,GAAIgC,KAAKG,MAAsB,IAAhBH,KAAKC,eAC7CpB,EAASiB,GACTf,EAAS,IAgBP,sBACA,qBAAKX,UAAU,YAAf,SACGQ,EAAMiB,KAAI,SAAC5B,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkBuB,EAClBtB,QAASF,IAASe,GAAaf,IAASiB,GAAajB,EAAKQ,SAHrDR,EAAKD,aCzEtBoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b1eb6952.chunk.js","sourcesContent":["import \"./SingleCard.css\";\n\nfunction SingleCard({ id, card, handleFrontClick, flipped }) {\n  return (\n    <div className=\"card\" key={id}>\n      <div className={flipped ? \"flipped\" : \"\"}>\n        <img className=\"front\" src={card.src} alt=\"card front\"></img>\n        <img\n          className=\"back\"\n          src={\"/img/cover.png\"}\n          alt=\"card back\"\n          onClick={() => handleFrontClick(card)}\n        ></img>\n      </div>\n    </div>\n  );\n}\nexport default SingleCard;\n","import { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard\";\n\nconst cardData = [\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [moves, setMoves] = useState(1);\n\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  const onMatch = useCallback(() => {\n    resetValues();\n    setMoves(moves + 1);\n  }, [moves]);\n\n  const onUnmatch = useCallback(() => {\n    resetValues();\n    setMoves(moves + 1);\n  }, [moves]);\n\n  //compare cards\n  useEffect(() => {\n    function compare() {\n      if (choiceOne !== null && choiceTwo !== null) {\n        if (choiceOne.src === choiceTwo.src) {\n          onMatch();\n          setCards((prevCards) => {\n            return prevCards.map((card) => {\n              if (card.src === choiceOne.src) {\n                return { ...card, matched: true };\n              } else {\n                return card;\n              }\n            });\n          });\n        } else {\n          onUnmatch();\n        }\n      }\n    }\n    compare();\n  }, [choiceOne, choiceTwo, onMatch, onUnmatch]);\n\n  function shuffleCards() {\n    const cardsArr = [...cardData, ...cardData]\n      .sort(() => Math.random() - 0.5)\n      .map((cd) => ({ ...cd, id: Math.floor(Math.random() * 100000) }));\n    setCards(cardsArr);\n    setMoves(1);\n  }\n\n  function resetValues() {\n    setTimeout(() => {\n      setChoiceOne(null);\n      setChoiceTwo(null);\n    }, 400);\n  }\n  function handleChoice(cardVal) {\n    choiceOne ? setChoiceTwo(cardVal) : setChoiceOne(cardVal);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleFrontClick={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}